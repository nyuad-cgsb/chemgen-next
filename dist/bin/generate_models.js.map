{"version":3,"sources":["../../bin/generate_models.js"],"names":["path","require","Promise","writeFile","promisify","app","mkdirp","camelCase","upperCamelCase","datasource","datasources","chemgenDS","outputDir","resolve","__dirname","modelConfig","console","log","JSON","stringify","modelDir","discoverModelDefinitions","then","createModels","models","process","exit","catch","error","stack","reject","map","discoverSchema","model","name","results","table","getForiegnKeys","Error","modelData","discoverForeignKeys","fKeyData","addForiegnKeys","modelDataWithKeys","writeModelFile","relations","relationName","String","data","pkTableName","modelName","type","foreignKey","pkColumnName","modelPath","join","push","fileContents"],"mappings":"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","file":"generate_models.js","sourcesContent":["'use strict'\n\nconst path = require('path')\nconst Promise = require('bluebird')\n// const fs = Promise.promisifyAll(require('fs'))\nconst writeFile = Promise.promisify(require('fs').writeFile)\nconst app = require('../server/server')\nconst mkdirp = require('mkdirp-promise')\nconst camelCase = require('camelcase')\nconst upperCamelCase = require('uppercamelcase')\n\n// const capitalize = require('lodash.capitalize')\nconst datasource = app.datasources.chemgenDS\n\nconst outputDir = path.resolve(__dirname, '_chemgenModels')\nconst modelConfig = require('../server/model-config.json')\nconsole.log(JSON.stringify(modelConfig))\n\nconst modelDir = path.resolve(__dirname, '..', 'common', 'models')\n\ndatasource.discoverModelDefinitions()\n  .then(models => createModels(models))\n  .then(() => {\n    process.exit(0)\n  })\n  .catch((error) => {\n    console.error(error.stack)\n    process.exit(1)\n  })\n\nfunction createModels (models) {\n  return new Promise((resolve, reject) => Promise.map(models, model => datasource.discoverSchema(model.name)\n    .then((results) => {\n      const table = model.name\n      return getForiegnKeys(datasource, model, results)\n      // const outputFile = path.resolve(outputDir, `${table}.json`)\n      // const fileContents = JSON.stringify(results, null, 2)\n    })\n  )\n    // .then(() => {\n    //   return writeFile(path.resolve(__dirname, '..', 'server', 'model-config.json' ), JSON.stringify(modelConfig, null, 2))\n    // })\n    .then(() => {\n      resolve()\n    })\n    .catch((error) => {\n      console.log(error.stack)\n      reject(new Error(error))\n    }))\n}\n\nfunction getForiegnKeys (datasource, model, modelData) {\n  return new Promise((resolve, reject) => {\n    datasource.discoverForeignKeys(model.name)\n      .then((fKeyData) => {\n        return addForiegnKeys(model, modelData, fKeyData)\n        // const outputFile = path.resolve(outputDir, `${model.name}-relations.json`)\n        // const fileContents = JSON.stringify(fKeyData, null, 2)\n      })\n      .then((modelDataWithKeys) => {\n        return writeModelFile(modelDataWithKeys)\n      })\n      .then((results) => {\n        resolve(results)\n      })\n      .catch((error) => {\n        console.error(error.stack)\n        reject(new Error(error))\n      })\n  })\n}\n\nfunction addForiegnKeys (model, modelData, fKeyData) {\n  return new Promise((resolve, reject) => {\n    var relations = {}\n    fKeyData.map(data => {\n      let relationName = String(camelCase(data.pkTableName))\n      let modelName = upperCamelCase(data.pkTableName)\n      relations[`${relationName}s`] = {type: 'hasMany', model: modelName, foreignKey: camelCase(data.pkColumnName)}\n    })\n    modelData.relations = relations\n    resolve(modelData)\n  })\n}\n\nfunction writeModelFile (modelData) {\n  return new Promise((resolve, reject) => {\n    const modelPath = path.resolve(modelDir, modelData.name, 'def')\n    path.join('..', 'common', 'models', modelData.name, 'defs')\n    modelConfig['_meta']['sources'].push(modelPath)\n    modelConfig[modelData.name] = {'datasource': 'chemgenDS', 'public': true}\n    mkdirp(modelPath)\n      .then(() => {\n        const fileContents = JSON.stringify(modelData, null, 2)\n        return writeFile(path.resolve(modelPath, `${modelData.name}.json`), fileContents)\n      })\n      .then(() => {\n        resolve()\n      })\n      .catch((error) => {\n        reject(new Error(error))\n      })\n  })\n}\n"]}